--- a/appuntamenti_screen.dart+++ b/appuntamenti_screen.dart@@ -1,73 +1,207 @@ import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
 import 'package:provider/provider.dart';
+import 'package:seg_medico/models/models.dart';
 import 'package:seg_medico/providers/app_provider.dart';
-import 'package:seg_medico/models/models.dart'; // Per AppointmentSlot
-import 'package:intl/intl.dart'; // Per la formattazione della data
+import 'package:seg_medico/widgets/main_drawer.dart';
 
 class AppuntamentiScreen extends StatefulWidget {
+  const AppuntamentiScreen({Key? key}) : super(key: key);
+
   @override
   _AppuntamentiScreenState createState() => _AppuntamentiScreenState();
 }
 
 class _AppuntamentiScreenState extends State<AppuntamentiScreen> {
-  Map<DateTime, List<String>> _availableSlots = {};
-  List<DateTime> _availableDates = [];
-  bool _isLoading = true;
+  AppointmentSlot? _selectedSlot;
+  final _notesController = TextEditingController();
 
   @override
   void initState() {
     super.initState();
-    _fetchAvailableSlots();
-  }
-
-  Future<void> _fetchAvailableSlots() async {
-    try {
-      final appProvider = Provider.of<AppProvider>(context, listen: false);
-      // Assumendo che ambulatorioId e numero siano recuperati altrove o codificati per esempio
-      final List<AppointmentSlot> slots = await appProvider.getAppointmentSlots(1, 10); // Valori di esempio
-
-      setState(() {
-        Map<DateTime, List<String>> tempSlots = {};
-        for (var slot in slots) {
-          tempSlots.update(
-            DateTime(slot.date.year, slot.date.month, slot.date.day), // Normalizza la data per evitare problemi di orario
-            (value) => value..add(slot.time),
-            ifAbsent: () => [slot.time],
+    WidgetsBinding.instance.addPostFrameCallback((_) {
+      Provider.of<AppProvider>(context, listen: false).fetchAvailableSlots();
+    });
+  }
+
+  @override
+  void dispose() {
+    _notesController.dispose();
+    super.dispose();
+  }
+
+  void _bookAppointment() async {
+    if (_selectedSlot == null) {
+      ScaffoldMessenger.of(context).showSnackBar(
+        const SnackBar(content: Text('Per favore, seleziona una data e un orario.')),
+      );
+      return;
+    }
+
+    final success = await Provider.of<AppProvider>(context, listen: false)
+        .bookAppointment(_selectedSlot!, _notesController.text);
+
+    if (mounted) {
+        if (success) {
+            ScaffoldMessenger.of(context).showSnackBar(
+                const SnackBar(content: Text('Appuntamento prenotato con successo!')),
+            );
+            Navigator.of(context).pop();
+        } else {
+            final error = Provider.of<AppProvider>(context, listen: false).errorMessage;
+            ScaffoldMessenger.of(context).showSnackBar(
+                SnackBar(content: Text(error ?? 'Errore durante la prenotazione.')),
+            );
+        }
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+
+    return Scaffold(
+      appBar: AppBar(
+        title: Text('Appuntamenti', textScaler: TextScaler.linear(textScaler)),
+      ),
+      drawer: const MainDrawer(),
+      body: Consumer<AppProvider>(
+        builder: (context, appProvider, child) {
+          if (appProvider.isLoading && appProvider.availableSlots.isEmpty) {
+            return const Center(child: CircularProgressIndicator());
+          }
+
+          if (appProvider.errorMessage != null && appProvider.availableSlots.isEmpty) {
+            return Center(
+              child: Padding(
+                padding: const EdgeInsets.all(16.0),
+                child: Text(
+                  appProvider.errorMessage!,
+                  textScaler: TextScaler.linear(textScaler),
+                  textAlign: TextAlign.center,
+                  style: TextStyle(color: Theme.of(context).colorScheme.error),
+                ),
+              ),
+            );
+          }
+
+          return Padding(
+            padding: const EdgeInsets.all(16.0),
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                Text(
+                  'Disponibilità:',
+                  style: Theme.of(context).textTheme.titleLarge,
+                  textScaler: TextScaler.linear(textScaler),
+                ),
+                const SizedBox(height: 16),
+                Expanded(
+                  child: _buildSlotsList(appProvider.availableSlots, textScaler),
+                ),
+                const SizedBox(height: 16),
+                TextField(
+                  controller: _notesController,
+                  decoration: const InputDecoration(
+                    labelText: '✏️ Note visita (opzionale)',
+                    border: OutlineInputBorder(),
+                  ),
+                  textCapitalization: TextCapitalization.sentences,
+                  maxLines: 2,
+                ),
+                const SizedBox(height: 24),
+                Row(
+                  children: [
+                    Expanded(
+                      child: OutlinedButton(
+                        onPressed: () => Navigator.of(context).pop(),
+                        child: Text('ANNULLA', textScaler: TextScaler.linear(textScaler)),
+                      ),
+                    ),
+                    const SizedBox(width: 16),
+                    Expanded(
+                      child: ElevatedButton(
+                        onPressed: _bookAppointment,
+                        child: Text('PRENOTA', textScaler: TextScaler.linear(textScaler)),
+                      ),
+                    ),
+                  ],
+                ),
+              ],
+            ),
           );
+        },
+      ),
+    );
+  }
+
+  Widget _buildSlotsList(List<AppointmentSlot> slots, double textScaler) {
+    if (slots.isEmpty) {
+      return Center(
+        child: Text(
+          'Nessuna disponibilità trovata.',
+          style: Theme.of(context).textTheme.bodyLarge,
+          textScaler: TextScaler.linear(textScaler),
+        ),
+      );
+    }
+    
+    // Group slots by date
+    final Map<DateTime, List<AppointmentSlot>> groupedSlots = {};
+    for (var slot in slots) {
+        final dateKey = DateTime(slot.date.year, slot.date.month, slot.date.day);
+        if (groupedSlots[dateKey] == null) {
+            groupedSlots[dateKey] = [];
         }
-        _availableSlots = tempSlots;
-        _availableDates = tempSlots.keys.toList()..sort(); // Ordina le date
-        _isLoading = false;
-      });
-    } catch (e) {
-      print('Error fetching appointment slots: $e');
-      setState(() {
-        _isLoading = false;
-      });
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Scaffold(
-      appBar: AppBar(title: const Text('Appuntamenti')),
-      body: _isLoading
-          ? const Center(child: CircularProgressIndicator())
-          : _availableDates.isEmpty
-              ? const Center(child: Text('Nessun appuntamento disponibile'))
-              : ListView.builder(
-                  itemCount: _availableDates.length,
-                  itemBuilder: (context, index) {
-                    final date = _availableDates[index];
-                    final times = _availableSlots[date] ?? [];
-                    return Card(
-                      margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
-                      child: ExpansionTile(
-                        title: Text(DateFormat('dd/MM/yyyy').format(date)),
-                        children: times.map((time) => ListTile(title: Text(time))).toList(),
-                      );
-                  },
-                ),
+        groupedSlots[dateKey]!.add(slot);
+    }
+    
+    final sortedDates = groupedSlots.keys.toList()..sort();
+
+    return ListView.builder(
+      itemCount: sortedDates.length,
+      itemBuilder: (context, index) {
+        final date = sortedDates[index];
+        final daySlots = groupedSlots[date]!..sort((a,b) => (a.startTime.hour * 60 + a.startTime.minute).compareTo(b.startTime.hour * 60 + b.startTime.minute));
+
+        return Card(
+            margin: const EdgeInsets.only(bottom: 16),
+            child: Padding(
+                padding: const EdgeInsets.all(8.0),
+                child: Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    children: [
+                        Padding(
+                          padding: const EdgeInsets.all(8.0),
+                          child: Text(
+                            DateFormat('EEEE d MMMM yyyy', 'it_IT').format(date),
+                            style: Theme.of(context).textTheme.titleMedium,
+                            textScaler: TextScaler.linear(textScaler),
+                          ),
+                        ),
+                        Wrap(
+                            spacing: 8.0,
+                            runSpacing: 4.0,
+                            children: daySlots.map((slot) {
+                                final isSelected = _selectedSlot?.id == slot.id;
+                                return ChoiceChip(
+                                    label: Text(slot.startTime.format(context)),
+                                    selected: isSelected,
+                                    onSelected: (selected) {
+                                        setState(() {
+                                            if (selected) {
+                                                _selectedSlot = slot;
+                                            }
+                                        });
+                                    },
+                                );
+                            }).toList(),
+                        ),
+                    ],
+                ),
+            ),
+        );
+      },
     );
   }
 }
