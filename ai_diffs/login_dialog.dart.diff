--- a/login_dialog.dart+++ b/login_dialog.dart@@ -1,171 +1,182 @@-// lib/widgets/login_dialog.dart
-
 import 'dart:async';
 import 'package:flutter/material.dart';
+import 'package:pinput/pinput.dart';
 import 'package:provider/provider.dart';
 import 'package:seg_medico/models/models.dart';
 import 'package:seg_medico/providers/app_provider.dart';
-import 'package:seg_medico/widgets/custom_snackbar.dart';
 
 class LoginDialog extends StatefulWidget {
-final Profile profile;
+  const LoginDialog({Key? key}) : super(key: key);
 
-const LoginDialog({super.key, required this.profile});
-
-@override
-State\<LoginDialog\> createState() =\> _LoginDialogState();
+  @override
+  State<LoginDialog> createState() => _LoginDialogState();
 }
 
-class _LoginDialogState extends State\<LoginDialog\> {
-final TextEditingController _otpController = TextEditingController();
-bool _otpRequested = false;
-bool _isLoading = false;
-int _cooldownSeconds = 0;
-Timer? _cooldownTimer;
+class _LoginDialogState extends State<LoginDialog> {
+  bool _isCodeRequested = false;
+  int _cooldown = 60;
+  Timer? _timer;
+  final _pinController = TextEditingController();
+  final _formKey = GlobalKey<FormState>();
 
-@override
-void dispose() {
-_otpController.dispose();
-_cooldownTimer?.cancel();
-super.dispose();
+  @override
+  void dispose() {
+    _timer?.cancel();
+    _pinController.dispose();
+    super.dispose();
+  }
+
+  void _startCooldown() {
+    _cooldown = 60;
+    if (_timer != null) {
+      _timer!.cancel();
+    }
+    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
+      if (mounted) {
+        if (_cooldown > 0) {
+          setState(() {
+            _cooldown--;
+          });
+        } else {
+          _timer?.cancel();
+        }
+      } else {
+        _timer?.cancel();
+      }
+    });
+  }
+
+  void _requestCode(AppProvider appProvider) async {
+    setState(() {
+      _isCodeRequested = true;
+    });
+    await appProvider.requestLoginSms();
+    if (mounted) {
+      if (appProvider.errorMessage == null) {
+        _startCooldown();
+      } else {
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(content: Text(appProvider.errorMessage ?? 'Errore sconosciuto')),
+        );
+        setState(() {
+          _isCodeRequested = false;
+        });
+      }
+    }
+  }
+
+  void _login(AppProvider appProvider) async {
+    if (_formKey.currentState?.validate() ?? false) {
+      final success = await appProvider.login(_pinController.text);
+      if (mounted) {
+        if (success) {
+          Navigator.of(context).pop();
+        } else {
+          ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(content: Text(appProvider.errorMessage ?? 'Errore durante il login.')),
+          );
+        }
+      }
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    final appProvider = context.watch<AppProvider>();
+    final profile = appProvider.currentProfile;
+
+    if (profile == null) {
+      return AlertDialog(
+        title: const Text('Errore'),
+        content: const Text('Nessun profilo selezionato. Aggiungine uno per continuare.'),
+        actions: [
+          TextButton(
+            onPressed: () => Navigator.of(context).pop(),
+            child: const Text('OK'),
+          )
+        ],
+      );
+    }
+
+    return AlertDialog(
+      title: Center(child: Text(profile.name.toUpperCase())),
+      content: SingleChildScrollView(
+        child: ListBody(
+          children: [
+            Center(child: Text('Telefono: ${profile.phone}')),
+            const SizedBox(height: 24),
+            if (!_isCodeRequested)
+              _buildRequestCodeView(appProvider)
+            else
+              _buildVerifyCodeView(appProvider),
+          ],
+        ),
+      ),
+    );
+  }
+
+  Widget _buildRequestCodeView(AppProvider appProvider) {
+    return Column(
+      children: [
+        ElevatedButton(
+          onPressed: appProvider.isLoading ? null : () => _requestCode(appProvider),
+          child: appProvider.isLoading
+              ? const CircularProgressIndicator(color: Colors.white)
+              : const Text('RICHIEDI CODICE SMS'),
+        ),
+        TextButton(
+          onPressed: () => Navigator.of(context).pop(),
+          child: const Text('ANNULLA'),
+        )
+      ],
+    );
+  }
+
+  Widget _buildVerifyCodeView(AppProvider appProvider) {
+    final defaultPinTheme = PinTheme(
+      width: 40,
+      height: 45,
+      textStyle: const TextStyle(fontSize: 20, fontWeight: FontWeight.w600),
+      decoration: BoxDecoration(
+        border: Border.all(color: Theme.of(context).colorScheme.primary.withOpacity(0.5)),
+        borderRadius: BorderRadius.circular(8),
+      ),
+    );
+
+    return Form(
+      key: _formKey,
+      child: Column(
+        children: [
+          const Text('Inserisci codice SMS (6 cifre)'),
+          const SizedBox(height: 16),
+          Pinput(
+            length: 6,
+            controller: _pinController,
+            defaultPinTheme: defaultPinTheme,
+            focusedPinTheme: defaultPinTheme.copyDecorationWith(
+              border: Border.all(color: Theme.of(context).colorScheme.primary),
+            ),
+            validator: (s) {
+              return s?.length == 6 ? null : 'Il codice deve essere di 6 cifre';
+            },
+          ),
+          const SizedBox(height: 24),
+          ElevatedButton(
+            onPressed: appProvider.isLoading ? null : () => _login(appProvider),
+            child: appProvider.isLoading
+                ? const CircularProgressIndicator(color: Colors.white)
+                : const Text('ACCEDI'),
+          ),
+          TextButton(
+            onPressed: _cooldown > 0 ? null : () => _requestCode(appProvider),
+            child: Text(_cooldown > 0 ? 'Reinvia tra $_cooldown s' : 'Reinvia codice'),
+          ),
+           TextButton(
+            onPressed: () => Navigator.of(context).pop(),
+            child: const Text('ANNULLA'),
+          )
+        ],
+      ),
+    );
+  }
 }
-
-void _startCooldown() {
-setState(() {
-_cooldownSeconds = 60;
-});
-_cooldownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
-if (_cooldownSeconds == 0) {
-timer.cancel();
-} else {
-setState(() {
-_cooldownSeconds--;
-});
-}
-});
-}
-
-Future\<void\> _requestOtp() async {
-setState(() {
-_isLoading = true;
-});
-final appProvider = Provider.of\<AppProvider\>(context, listen: false);
-final success = await appProvider.requestOtp(
-widget.profile.codFis,
-widget.profile.phoneNumber,
-);
-setState(() {
-_isLoading = false;
-});
-if (success) {
-setState(() {
-_otpRequested = true;
-});
-_startCooldown();
-CustomSnackBar.show(context, 'Codice SMS inviato\!');
-} else {
-CustomSnackBar.show(context, 'Errore durante la richiesta del codice. Riprova.', isError: true);
-}
-}
-
-Future\<void\> _login() async {
-if (_otpController.text.length \!= 6) {
-CustomSnackBar.show(context, 'Il codice SMS deve essere di 6 cifre.', isError: true);
-return;
-}
-
-```
-setState(() {
-  _isLoading = true;
-});
-final appProvider = Provider.of<AppProvider>(context, listen: false);
-try {
-  final success = await appProvider.login(
-    widget.profile.codFis,
-    widget.profile.phoneNumber,
-    _otpController.text,
-  );
-  setState(() {
-    _isLoading = false;
-  });
-  if (success) {
-    CustomSnackBar.show(context, 'Accesso effettuato con successo!');
-    Navigator.of(context).pop();
-  } else {
-    CustomSnackBar.show(context, 'Codice errato o scaduto. Riprova.', isError: true);
-  }
-} catch (e) {
-  setState(() {
-    _isLoading = false;
-  });
-  CustomSnackBar.show(context, e.toString().replaceFirst('Exception: ', ''), isError: true);
-}
-```
-
-}
-
-@override
-Widget build(BuildContext context) {
-return AlertDialog(
-title: Text(widget.profile.name),
-content: Column(
-mainAxisSize: MainAxisSize.min,
-children: [
-Text('Telefono: ${widget.profile.phoneNumber}'),
-const SizedBox(height: 20),
-if (\!_otpRequested)
-ElevatedButton(
-onPressed: _isLoading || _cooldownSeconds \> 0 ? null : *requestOtp,
-child: *isLoading
-? const CircularProgressIndicator()
-: Text(*cooldownSeconds \> 0
-? 'Reinvia in $*cooldownSeconds s'
-: 'RICHIEDI CODICE SMS'),
-),
-if (*otpRequested) ...[
-const Text('Inserisci codice SMS (6 cifre)'),
-TextField(
-controller: *otpController,
-keyboardType: TextInputType.number,
-maxLength: 6,
-decoration: const InputDecoration(
-hintText: '******',
-counterText: '', // Hide character counter
-),
-onChanged: (value) {
-if (value.length == 6) {
-FocusScope.of(context).unfocus(); // Dismiss keyboard
-}
-},
-),
-const SizedBox(height: 20),
-Row(
-mainAxisAlignment: MainAxisAlignment.spaceAround,
-children: [
-ElevatedButton(
-onPressed: _isLoading ? null : _login,
-child: _isLoading ? const CircularProgressIndicator() : const Text('ACCEDI'),
-),
-ElevatedButton(
-onPressed: () {
-Navigator.of(context).pop();
-},
-child: const Text('ANNULLA'),
-),
-],
-),
-],
-],
-),
-actions: [
-if (\!_otpRequested)
-TextButton(
-onPressed: () {
-Navigator.of(context).pop();
-},
-child: const Text('ANNULLA'),
-),
-],
-);
-}
-}
