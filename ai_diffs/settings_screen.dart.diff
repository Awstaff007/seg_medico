--- a/settings_screen.dart+++ b/settings_screen.dart@@ -1,295 +1,251 @@-// lib/screens/settings_screen.dart
-
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
+import 'package:seg_medico/models/models.dart';
 import 'package:seg_medico/providers/app_provider.dart';
-import 'package:seg_medico/widgets/custom_snackbar.dart';
-import 'package:flutter_local_notifications/flutter_local_notifications.dart';
-import 'package:seg_medico/main.dart'; // Importa main.dart per accedere a flutterLocalNotificationsPlugin
+import 'package:seg_medico/widgets/main_drawer.dart';
 
 class SettingsScreen extends StatefulWidget {
-  const SettingsScreen({super.key});
+  const SettingsScreen({Key? key}) : super(key: key);
 
   @override
-  State<SettingsScreen> createState() => _SettingsScreenState();
+  _SettingsScreenState createState() => _SettingsScreenState();
 }
 
 class _SettingsScreenState extends State<SettingsScreen> {
-  double _textSize = 1.0; // Default text size (100%)
-  bool _repeatFarmaci = true;
-  int _farmaciRepeatDays = 30;
-  bool _appointmentDayBefore = true;
-  bool _appointmentMinBefore = true;
-  int _appointmentMinBeforeValue = 30;
-  String _theme = 'Chiaro'; // 'Chiaro' or 'Scuro'
+  late Settings _currentSettings;
 
   @override
-  void initState() {
-    super.initState();
-    _loadSettings();
-  }
-
-  Future<void> _loadSettings() async {
-    // TODO: Load settings from SharedPreferences or similar
-    // For now, using default values
-  }
-
-  Future<void> _saveSettings() async {
-    // TODO: Save settings to SharedPreferences or similar
-    CustomSnackBar.show(context, 'Impostazioni salvate!');
-  }
-
-  Future<void> _testNotification() async {
-    const AndroidNotificationDetails androidPlatformChannelSpecifics =
-    AndroidNotificationDetails(
-      'your channel id',
-      'your channel name',
-      channelDescription: 'your channel description',
-      importance: Importance.max,
-      priority: Priority.high,
-      showWhen: false,
-    );
-    const DarwinNotificationDetails darwinPlatformChannelSpecifics =
-    DarwinNotificationDetails();
-    const NotificationDetails platformChannelSpecifics = NotificationDetails(
-      android: androidPlatformChannelSpecifics,
-      iOS: darwinPlatformChannelSpecifics,
-    );
-    await flutterLocalNotificationsPlugin.show(
-      0,
-      'Notifica di prova',
-      'Questa è una notifica di prova dalla tua app.',
-      platformChannelSpecifics,
-      payload: 'test_notification',
-    );
-    CustomSnackBar.show(context, 'Notifica di prova inviata!');
+  void didChangeDependencies() {
+    super.didChangeDependencies();
+    _currentSettings = Settings.fromJson(
+        Provider.of<AppProvider>(context, listen: false).settings.toJson());
+  }
+
+  void _saveSettings() {
+    Provider.of<AppProvider>(context, listen: false).updateSettings(_currentSettings);
+    ScaffoldMessenger.of(context).showSnackBar(
+      const SnackBar(content: Text('Impostazioni salvate.')),
+    );
+    if(mounted) Navigator.of(context).pop();
+  }
+
+  void _showTestNotification() {
+    ScaffoldMessenger.of(context).showSnackBar(
+      const SnackBar(
+        content: Text('🔔 Questa è una notifica di prova!'),
+        duration: Duration(seconds: 3),
+      ),
+    );
   }
 
   @override
   Widget build(BuildContext context) {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+    final themeProvider = Provider.of<ThemeProvider>(context);
+
     return Scaffold(
       appBar: AppBar(
-        title: const Text('IMPOSTAZIONI'),
-        // Removed profile dropdown and logout button from AppBar
-      ),
-      body: Padding(
+        title: Text('Impostazioni', textScaler: TextScaler.linear(textScaler)),
+      ),
+      drawer: const MainDrawer(),
+      body: ListView(
         padding: const EdgeInsets.all(16.0),
-        child: Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Text('📏 Dimensione testo: ${(_textSize * 100).toInt()}%', style: const TextStyle(fontSize: 18)),
-            Slider(
-              value: _textSize,
-              min: 0.5,
-              max: 2.0,
-              divisions: 3, // 50%, 100%, 150%, 200%
-              label: '${(_textSize * 100).toInt()}%',
-              onChanged: (newValue) {
-                setState(() {
-                  _textSize = newValue;
-                  // TODO: Apply global text size change
-                });
-              },
+        children: [
+          _buildSectionTitle('Generali', context),
+          _buildFontSizeSetting(),
+          _buildThemeSetting(themeProvider),
+          const Divider(height: 32),
+          _buildSectionTitle('Notifiche Farmaci', context),
+          _buildDrugReminderSetting(),
+          const Divider(height: 32),
+          _buildSectionTitle('Notifiche Appuntamenti', context),
+          _buildAppointmentDayReminderSetting(),
+          _buildAppointmentTimeReminderSetting(),
+          const Divider(height: 32),
+          _buildSectionTitle('Permessi', context),
+          ListTile(
+            title: Text('Notifiche Push', textScaler: TextScaler.linear(textScaler)),
+            subtitle: const Text('Tocca per aprire le impostazioni dell\'app'),
+            trailing: const Icon(Icons.arrow_forward_ios),
+            onTap: () {
+              // Qui andrebbe la logica per aprire le impostazioni del sistema
+            },
+          ),
+          const SizedBox(height: 32),
+          Row(
+            children: [
+               Expanded(
+                child: OutlinedButton(
+                  onPressed: () => Navigator.of(context).pop(),
+                  child: Text('ANNULLA', textScaler: TextScaler.linear(textScaler)),
+                ),
+              ),
+              const SizedBox(width: 16),
+              Expanded(
+                child: ElevatedButton(
+                  onPressed: _saveSettings,
+                  child: Text('SALVA', textScaler: TextScaler.linear(textScaler)),
+                ),
+              ),
+            ],
+          ),
+           const SizedBox(height: 16),
+           Center(
+             child: TextButton(
+                onPressed: _showTestNotification,
+                child: Text('PROVA NOTIFICA', textScaler: TextScaler.linear(textScaler)),
+             ),
+           )
+        ],
+      ),
+    );
+  }
+
+  Widget _buildSectionTitle(String title, BuildContext context) {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+    return Padding(
+      padding: const EdgeInsets.only(bottom: 8.0),
+      child: Text(
+        title,
+        style: Theme.of(context).textTheme.titleLarge?.copyWith(color: Theme.of(context).colorScheme.primary),
+        textScaler: TextScaler.linear(textScaler),
+      ),
+    );
+  }
+
+  Widget _buildFontSizeSetting() {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+    return ListTile(
+      title: Text('Dimensione testo', textScaler: TextScaler.linear(textScaler)),
+      subtitle: Slider(
+        value: _currentSettings.fontSize,
+        min: 50,
+        max: 200,
+        divisions: 15,
+        label: '${_currentSettings.fontSize.round()}%',
+        onChanged: (value) {
+          setState(() {
+            _currentSettings.fontSize = value;
+          });
+        },
+      ),
+      trailing: Text('${_currentSettings.fontSize.round()}%', textScaler: TextScaler.linear(textScaler)),
+    );
+  }
+
+  Widget _buildThemeSetting(ThemeProvider themeProvider) {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+    return ListTile(
+      title: Text('Tema', textScaler: TextScaler.linear(textScaler)),
+      trailing: DropdownButton<String>(
+        value: _currentSettings.theme,
+        items: const [
+          DropdownMenuItem(value: 'system', child: Text('Sistema')),
+          DropdownMenuItem(value: 'light', child: Text('Chiaro')),
+          DropdownMenuItem(value: 'dark', child: Text('Scuro')),
+        ],
+        onChanged: (value) {
+          if (value != null) {
+            setState(() {
+              _currentSettings.theme = value;
+              if (value == 'light') themeProvider.setThemeMode(ThemeMode.light);
+              else if (value == 'dark') themeProvider.setThemeMode(ThemeMode.dark);
+              else themeProvider.setThemeMode(ThemeMode.system);
+            });
+          }
+        },
+      ),
+    );
+  }
+
+  Widget _buildDrugReminderSetting() {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+    return Column(
+      children: [
+        SwitchListTile(
+          title: Text('Avviso ripetizione farmaci', textScaler: TextScaler.linear(textScaler)),
+          value: _currentSettings.drugReminderEnabled,
+          onChanged: (value) {
+            setState(() {
+              _currentSettings.drugReminderEnabled = value;
+            });
+          },
+        ),
+        if (_currentSettings.drugReminderEnabled)
+          ListTile(
+            title: Text('Ripetizione ogni (giorni)', textScaler: TextScaler.linear(textScaler)),
+            trailing: SizedBox(
+              width: 80,
+              child: DropdownButton<int>(
+                isExpanded: true,
+                value: _currentSettings.drugReminderDays,
+                items: [15, 30, 45, 60].map((int value) {
+                  return DropdownMenuItem<int>(
+                    value: value,
+                    child: Text(value.toString()),
+                  );
+                }).toList(),
+                onChanged: (int? newValue) {
+                  setState(() {
+                    _currentSettings.drugReminderDays = newValue!;
+                  });
+                },
+              ),
             ),
-            const SizedBox(height: 20),
-            Text('🔔 Farmaci:', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
-            Row(
-              children: [
-                const Text('Ripetizione ogni '),
-                SizedBox(
-                  width: 50,
-                  child: TextField(
-                    keyboardType: TextInputType.number,
-                    textAlign: TextAlign.center,
-                    controller: TextEditingController(text: _farmaciRepeatDays.toString()),
-                    onChanged: (value) {
-                      setState(() {
-                        _farmaciRepeatDays = int.tryParse(value) ?? 30;
-                      });
-                    },
-                  ),
-                ),
-                const Text(' giorni'),
-                Switch(
-                  value: _repeatFarmaci,
-                  onChanged: (newValue) {
-                    setState(() {
-                      _repeatFarmaci = newValue;
-                    });
-                  },
-                ),
-              ],
+          ),
+      ],
+    );
+  }
+
+  Widget _buildAppointmentDayReminderSetting() {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+    return SwitchListTile(
+      title: Text('Avviso il giorno prima', textScaler: TextScaler.linear(textScaler)),
+      value: _currentSettings.appointmentDayReminderEnabled,
+      onChanged: (value) {
+        setState(() {
+          _currentSettings.appointmentDayReminderEnabled = value;
+        });
+      },
+    );
+  }
+
+  Widget _buildAppointmentTimeReminderSetting() {
+    final textScaler = Provider.of<AppProvider>(context).fontSizeMultiplier;
+    return Column(
+      children: [
+        SwitchListTile(
+          title: Text('Avviso prima della visita', textScaler: TextScaler.linear(textScaler)),
+          value: _currentSettings.appointmentTimeReminderEnabled,
+          onChanged: (value) {
+            setState(() {
+              _currentSettings.appointmentTimeReminderEnabled = value;
+            });
+          },
+        ),
+        if (_currentSettings.appointmentTimeReminderEnabled)
+          ListTile(
+            title: Text('Avvisami (minuti prima)', textScaler: TextScaler.linear(textScaler)),
+            trailing: SizedBox(
+              width: 80,
+              child: DropdownButton<int>(
+                isExpanded: true,
+                value: _currentSettings.appointmentReminderMinutes,
+                items: [30, 60, 90, 120].map((int value) {
+                  return DropdownMenuItem<int>(
+                    value: value,
+                    child: Text(value.toString()),
+                  );
+                }).toList(),
+                onChanged: (int? newValue) {
+                  setState(() {
+                    _currentSettings.appointmentReminderMinutes = newValue!;
+                  });
+                },
+              ),
             ),
-            const SizedBox(height: 20),
-            Text('🔔 Appuntamenti:', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
-            Row(
-              children: [
-                const Text('Avviso il giorno prima'),
-                const Spacer(),
-                Switch(
-                  value: _appointmentDayBefore,
-                  onChanged: (newValue) {
-                    setState(() {
-                      _appointmentDayBefore = newValue;
-                    });
-                  },
-                ),
-              ],
-            ),
-            Row(
-              children: [
-                const Text('Avviso '),
-                SizedBox(
-                  width: 50,
-                  child: TextField(
-                    keyboardType: TextInputType.number,
-                    textAlign: TextAlign.center,
-                    controller: TextEditingController(text: _appointmentMinBeforeValue.toString()),
-                    onChanged: (value) {
-                      setState(() {
-                        _appointmentMinBeforeValue = int.tryParse(value) ?? 30;
-                      });
-                    },
-                  ),
-                ),
-                const Text(' min prima'),
-                Switch(
-                  value: _appointmentMinBefore,
-                  onChanged: (newValue) {
-                    setState(() {
-                      _appointmentMinBefore = newValue;
-                    });
-                  },
-                ),
-              ],
-            ),
-            const SizedBox(height: 20),
-            Text('Permessi:', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
-            const Text('◦ Push Notifications'), // Placeholder, actual permission check/request needed
-            const SizedBox(height: 20),
-            Text('🎨 Tema:', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
-            Row(
-              children: [
-                Radio<String>(
-                  value: 'Chiaro',
-                  groupValue: _theme,
-                  onChanged: (value) {
-                    setState(() {
-                      _theme = value!;
-                      // TODO: Apply theme change
-                    });
-                  },
-                ),
-                const Text('Chiaro'),
-                Radio<String>(
-                  value: 'Scuro',
-                  groupValue: _theme,
-                  onChanged: (value) {
-                    setState(() {
-                      _theme = value!;
-                      // TODO: Apply theme change
-                    });
-                  },
-                ),
-                const Text('Scuro'),
-              ],
-            ),
-            const Spacer(),
-            Row(
-              mainAxisAlignment: MainAxisAlignment.spaceAround,
-              children: [
-                Expanded(
-                  child: ElevatedButton(
-                    onPressed: _testNotification,
-                    style: ElevatedButton.styleFrom(
-                      padding: const EdgeInsets.symmetric(vertical: 15),
-                      textStyle: const TextStyle(fontSize: 18),
-                    ),
-                    child: const Text('PROVA NOTIFICA'),
-                  ),
-                ),
-                const SizedBox(width: 20),
-                Expanded(
-                  child: ElevatedButton(
-                    onPressed: _saveSettings,
-                    style: ElevatedButton.styleFrom(
-                      padding: const EdgeInsets.symmetric(vertical: 15),
-                      textStyle: const TextStyle(fontSize: 18),
-                    ),
-                    child: const Text('SALVA'),
-                  ),
-                ),
-                const SizedBox(width: 20),
-                Expanded(
-                  child: ElevatedButton(
-                    onPressed: () {
-                      Navigator.pop(context); // Go back without saving
-                    },
-                    style: ElevatedButton.styleFrom(
-                      padding: const EdgeInsets.symmetric(vertical: 15),
-                      textStyle: const TextStyle(fontSize: 18),
-                    ),
-                    child: const Text('ANNULLA'),
-                  ),
-                ),
-              ],
-            ),
-          ],
-        ),
-      ),
-      bottomNavigationBar: BottomAppBar(
-        child: Row(
-          mainAxisAlignment: MainAxisAlignment.end,
-          children: [
-            PopupMenuButton<String>(
-              icon: const Icon(Icons.more_vert),
-              onSelected: (String value) {
-                final appProvider = Provider.of<AppProvider>(context, listen: false);
-                if (!appProvider.isLoggedIn) {
-                  CustomSnackBar.show(context, 'Accedi per accedere al menu.');
-                  return;
-                }
-                switch (value) {
-                  case 'cronologia':
-                    Navigator.pushNamed(context, '/cronologia');
-                    break;
-                  case 'farmaci':
-                    Navigator.pushNamed(context, '/farmaci');
-                    break;
-                  case 'appuntamenti':
-                    Navigator.pushNamed(context, '/appuntamenti');
-                    break;
-                  case 'impostazioni':
-                  // Already on impostazioni screen
-                    break;
-                }
-              },
-              itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
-                PopupMenuItem<String>(
-                  value: 'cronologia',
-                  enabled: Provider.of<AppProvider>(context).isLoggedIn,
-                  child: Text(Provider.of<AppProvider>(context).isLoggedIn ? 'Cronologia' : '⦿ Cronologia (dis.)'),
-                ),
-                PopupMenuItem<String>(
-                  value: 'farmaci',
-                  enabled: Provider.of<AppProvider>(context).isLoggedIn,
-                  child: Text(Provider.of<AppProvider>(context).isLoggedIn ? 'Farmaci' : '⦿ Farmaci (dis.)'),
-                ),
-                PopupMenuItem<String>(
-                  value: 'appuntamenti',
-                  enabled: Provider.of<AppProvider>(context).isLoggedIn,
-                  child: Text(Provider.of<AppProvider>(context).isLoggedIn ? 'Appuntamenti' : '⦿ Appuntamenti (dis.)'),
-                ),
-                PopupMenuItem<String>(
-                  value: 'impostazioni',
-                  enabled: Provider.of<AppProvider>(context).isLoggedIn,
-                  child: Text(Provider.of<AppProvider>(context).isLoggedIn ? 'Impostazioni' : '⦿ Impostazioni (dis.)'),
-                ),
-              ],
-            ),
-          ],
-        ),
-      ),
+          ),
+      ],
     );
   }
 }
