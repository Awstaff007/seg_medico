--- a/app_provider.dart+++ b/app_provider.dart@@ -138,9 +138,8 @@   Future<void> switchProfile(String profileId) async {
     final profile = await _profileManager.getProfile(profileId);
     if (profile != null) {
-      _currentProfile = profile;
       await _profileManager.setDefaultProfile(profileId);
-      await _loadProfileData(); // This will handle login status and data fetching
+      await _loadProfileData(); 
     }
   }
   
@@ -164,9 +163,13 @@     if (!_isLoggedIn || _currentProfile == null) return;
     try {
       final appointments = await _apiService.getAppointments();
-      _nextAppointment = appointments.where((a) => a.date.isAfter(DateTime.now())).toList()
-        ..sort((a,b) => a.date.compareTo(b.date))
-        .firstOrNull;
+      final upcoming = appointments.where((a) => a.date.isAfter(DateTime.now())).toList();
+      if(upcoming.isNotEmpty){
+        upcoming.sort((a,b) => a.date.compareTo(b.date));
+        _nextAppointment = upcoming.first;
+      } else {
+        _nextAppointment = null;
+      }
     } catch (e) {
       _errorMessage = "Impossibile caricare il prossimo appuntamento.";
     }
@@ -179,7 +182,6 @@     _availableSlots = [];
     notifyListeners();
     try {
-      // Dati di esempio, da sostituire
       _availableSlots = await _apiService.getAppointmentSlots("AMB01", "12345");
     } catch (e) {
       _errorMessage = "Impossibile caricare le disponibilit√†.";
@@ -213,9 +215,6 @@     notifyListeners();
     try {
       await _apiService.cancelAppointment(appointmentId);
-      if (_nextAppointment?.id == appointmentId) {
-        _nextAppointment = null;
-      }
       await fetchNextAppointment(); // Cerca il prossimo disponibile
       await fetchHistory(); // Refresh history
     } catch (e) {
@@ -229,7 +228,6 @@   // Drugs
   Future<void> fetchUserDrugs() async {
     if (!_isLoggedIn || _currentProfile == null) return;
-    // Simulating API or local storage fetch
     _userDrugs = await _apiService.getDrugs();
     notifyListeners();
   }
